
/*******************************************************
 * ESP8266 Saving Values in Ram case internet offline / Code Upgrade
 * 05/2024 - Felipe Buhrer
 */
/********************************************************
*/
//Change you Wifi and Gsheets API credentials before use
//Ignore
//Debug State Set
#define DEBUG 1

#if DEBUG == 1
#define debug(x) Serial.print(x)
#define debugln(x) Serial.println(x)
#else
#define debug(x)
#define debugln(x)
#endif

#include <Arduino.h>                  //Overall librarie for commun methods
#include <ESP8266WiFi.h>              //Wifi conection for esp8266
#include <ESP_Google_Sheet_Client.h>  //Send data to Google Sheets
#include <NTPClient.h>                //Get the EPOCH time from web
#include <WiFiUdp.h>                  // Get the EPOCH time from web
#include <DHT.h>                      //Read DHT Sensors
#include <vector>                     //Save Ram Data
#include <String>                     //Save Ram Data
#include <ctime>                      //Save Ram Data

#include "envKeys.h"
unsigned long ms = 0;
unsigned long mr = 0;
void tokenStatusCallback(TokenInfo info);

//Variables for testing on Google Sheets
String sheetAppend = "Teste!"; //Dados
String sheetValues = "TemposTeste!";  // Config

//Temperatura Termistor
#define Vin 3.25          // define constante igual a 5.0
#define T0 298.15         // define constante igual a 298.15 Kelvin
#define Rt 10000          // Resistor do divisor de tensao
#define R0 10000          // Valor da resistencia inicial do NTC
#define T1 273.15         // [K] in datasheet 0o C
#define T2 373.15         // [K] in datasheet 100° C
#define RT1 35563         // [ohms] resistencia in T1
#define RT2 549           // [ohms] resistencia in T2
float beta = 0.0;         // parametros iniciais [K]
float Rinf = 0.0;         // parametros iniciais [ohm]
float TempKelvin = 0.0;   // variable output
float TempCelsius = 0.0;  // variable output
float Vout = 0.0;         // Vout in A0
float Rout = 0.0;

//Define Pins and Sensors
//2 pins for valves outputs - D3 and D4
//2 Pins for DHT reading - D1 and D2
//3 pins for comunication with MUX - D5, D6, D7
#define mudasPin 2   //D4 turn On plants Relay, runs on Low
#define sprayPin 0   //D3 turn On Greenhouse Umidity Relay, runs on Low
#define DHTESTUFA 5  //D1 Sensor Temp Greenhouse
#define DHTMODULO 4  //D2 Sensor Temp Outside
#define MUXA 13      //D7 Mux channel A
#define MUXB 12      //D6 Mux channel B
#define MUXC 14      //D5 Mux channel C

//Sensores DHT 11
#define DHTTYPE DHT11
DHT dhtModulo(DHTMODULO, DHTTYPE);
float temperatureModulo = 0.0;
float humidityModulo = 0.0;
DHT dhtEstufa(DHTESTUFA, DHTTYPE);
float temperatureEstufa = 0.0;
float humidityEstufa = 0.0;

//Termistor Sensor
float mediaVaristor = 0.0;

//LDR sensor
float lumPC = 0.0;

//Resistive Soil Moisture
float soilUmUm = 0.0;

//Sensor Umidade Solo Capacitivo 1
float soilCap1 = 0.0;

//Sensor Umidade Solo Capacitivo 2
float soilCap2 = 0.0;

//Greenhous Activity on/off
bool grenhouseON = 0;
int limiarEstufa = 80;

//Variables for cicle Delays and Irrigation system
int tempoCiclo = 6000;        // 10 min
int tempoIrrigacao = 300000;  //5 min
int limiteUmidade = 80;       //45%

const int NUMERO_AMOSTRAS = 40;  //Amostras para mandar apenas a media para a planilha
long somatoria = 0;
int leitura_sensor = 0;
float media;
float leitura;



//Epoch Time Config
const long utcOffsetInSeconds = -10800;  //Ajuste de data e hora
// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");
//Variaveis data e hora
time_t epochTime;
int monthDay;
int currentMonth;
int currentYear;
String currentDate;
String formattedTime;


//--------------------------Methods
//Connect Wifi
void connectWiFi();

//**Sensors
//dht11
void Load_DHT11_Data();
//Leitura Sensores Resistivos
int readPin();
//Mux port selection code
void selectChannel();
//Calculate Epoch Dependent Variables
void epochCalculate();

//**Gsheets --
void tokenStatusCallback();
//Enviador de Dados
void loop_enviadorDados();
//Recebedor de Dados
void loop_receberDados();


//**Saving data to RAM
// Struct definition to save all data formats
struct Dados;
// Vector para armazenar os conjuntos de dados
std::vector<Dados> dadosArmazenados;
//Method for saving values in RAM
void saveValues();
void showDatainRAM();
void sendRamData();

//--------------Setup
void setup() {

  Serial.begin(115200);

  //DHT sensores
  dhtModulo.begin();
  dhtEstufa.begin();

  //Thermistor Calculation
  beta = (log(RT1 / RT2)) / ((1 / T1) - (1 / T2));  // calculo de beta
  Rinf = R0 * exp(-beta / T0);                      // calculo de Rinf

  // Mux pins as OUTPUTS
  pinMode(MUXA, OUTPUT);
  pinMode(MUXB, OUTPUT);
  pinMode(MUXC, OUTPUT);

  //Greenhouse relay pin
  pinMode(sprayPin, OUTPUT);
  digitalWrite(sprayPin, HIGH);

  //Irrigation System Pin
  pinMode(mudasPin, OUTPUT);
  digitalWrite(mudasPin, HIGH);

  //Client Check
  //GSheet.printf("ESP Google Sheet Client v%s\n\n", ESP_GOOGLE_SHEET_CLIENT_VERSION);

  //WiFi Novo
  connectWiFi();

  //Inicializando Gsheets
  if (WiFi.status() == WL_CONNECTED) {
    debugln("\nWi-Fi connected!");

    // Set the callback for Google API access token generation status (for debug only)
    GSheet.setTokenCallback(tokenStatusCallback);
    GSheet.setPrerefreshSeconds(10 * 60);
    GSheet.begin(CLIENT_EMAIL, PROJECT_ID, PRIVATE_KEY);

  } else {
    debugln("\nFailed to connect to Wi-Fi!");
  }

  // Initialize a NTPClient to get time
  timeClient.begin();
  timeClient.setTimeOffset(-10800);
}

void loop() {

  //MUX Readings
  for (int channel = 0; channel < 8; channel++) {
    //Chanel 0,1 and 3 are avaiable
    selectChannel(channel);  // Seleciona o canal do MUX

    //Varistor Temperature
    if (channel == 2) {
      leitura = 0;
      leitura = readPin();
      Vout = Vin * ((float)(media) / 1023.0);  // calculo de V0 e leitura de A0
      Rout = (Rt * Vout / (Vin - Vout));       // calculo de Rout
      TempKelvin = (beta / log(Rout / Rinf));  // calculo da temp. em Kelvins
      TempCelsius = TempKelvin - 273.15;       // calculo da temp. em Celsius
      debug("Temperatura em Celsius: ");       // imprime no monitor serial
      debugln(TempCelsius);                    // imprime temperatura Celsius

    }

    else if (channel == 4) {
      //Have a 10k resistor between pin and 3.3v
      //Soil Moisture Resistive sensor
      leitura = 0;
      leitura = readPin();
      soilUmUm = map(leitura, 0, 1023, 100, 0);
      debug("Umidade Resistiva do Solo 1 em : ");
      debug(soilUmUm);
      debugln("%");
    }

    else if (channel == 5) {
      //Have a 10k resistor between pin and 3.3v
      //Luminosity Reading
      leitura = 0;
      leitura = readPin();
      lumPC = map(leitura, 0, 1023, 100, 0);
      debugln();
      debug("Luminosidade em : ");
      debug(lumPC);
      debugln("%");

    }

    else if (channel == 6) {

      //Capacitive Sensor
      leitura = 0;
      leitura = readPin();
      soilCap1 = map(leitura, 0, 1023, 100, 0);
      debugln();
      debug("Capacity Humidity Reading : ");
      debug(soilCap1);
      debugln("%");

    } else if (channel == 7) {

      //Capacitive Sensor
      leitura = 0;
      leitura = readPin();
      soilCap2 = map(leitura, 0, 1023, 100, 0);
      debugln();
      debug("Capacity Humidity Reading : ");
      debug(soilCap2);
      debugln("%");
    }
  }

  Load_DHT11_Data();

  // Verifica se a conexão com a Internet está ativa a cada intervalo de tempo
  if (WiFi.status() == WL_CONNECTED) {

    timeClient.update();
    epochTime = timeClient.getEpochTime();
    epochCalculate(epochTime);

    bool conectionError = true;

    for (int i = 0; i < 3; i++) {
      if (GSheet.ready()) {
        // Se a conexão estiver pronta, execute as funções relacionadas ao Google Sheets
        loop_enviadorDados();
        loop_receberDados();
        conectionError = false;
        break;  // Sai do loop de tentativas se a conexão estiver pronta
      } else {
        // Set the callback for Google API access token generation status (for debug only)
        //GSheet.setTokenCallback(tokenStatusCallback);

        debugln("Trying to reconnect to Google Sheets...");
        GSheet.setPrerefreshSeconds(10 * 60);
        GSheet.begin(CLIENT_EMAIL, PROJECT_ID, PRIVATE_KEY);
        delay(5000);  // Aguarda um curto período antes de tentar novamente
      }
    }

    if (conectionError) {
      saveValues();
    }
  }

  else {
    debugln("Disconnected from Wi-Fi. Reconnecting...");

    WiFi.disconnect();
    delay(500);

    connectWiFi();

    epochTime = epochTime + (tempoCiclo / 1000);
    epochCalculate(epochTime);

    saveValues();
  }

  //Greenhouse Relay On/Off Logic
  if (grenhouseON == 1) {

    if (humidityEstufa < limiarEstufa) {
      digitalWrite(sprayPin, LOW);
    } else {
      digitalWrite(sprayPin, HIGH);
    }

  } else {

    digitalWrite(sprayPin, HIGH);
  }


  //Irrigation Relay On/Off Logic
  if (soilUmUm < limiteUmidade) {

    //check to only runs 1 valve at a time, prevent power supply ishues
    if (humidityEstufa < limiarEstufa) {
      digitalWrite(sprayPin, HIGH);
      delay(1000);
    }

    debugln("Relé Irrigação Acionado");
    digitalWrite(mudasPin, LOW);
    delay(tempoIrrigacao);
    digitalWrite(mudasPin, HIGH);
    debugln("Relé Irrigação Desligado");

    if (humidityEstufa < limiarEstufa) {
      digitalWrite(sprayPin, LOW);
    }
  }

  if (!dadosArmazenados.empty() && WiFi.status() == WL_CONNECTED) {
    // Enviar os dados armazenados
    sendRamData();
  }


  showDatainRAM();

  debugln("Cicle Delay: ");
  debug(tempoCiclo);
  delay(tempoCiclo);
}

//Para amanhã, verificar novamente se os dados estao sendo apagados após envio;
//Iniciar o calculo de média para enviar para a memória Flash as médias por hora