/********************************************************
 * RoboticHorse Interprise
 * ESP8266 - Adding More Analog Ports with MUX
 * 04/2024 - Felipe Buhrer
 * 
*/
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP_Google_Sheet_Client.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <DHT.h>


//Wifi com 2 redes
//const char *ssid[] = { "Zezinho", "jose" };
const char *ssid[] = { **};
const char *password = **;
const int numNetworks = sizeof(ssid) / sizeof(ssid[0]);

//Temperatura Termistor
#define Vin 3.25          // define constante igual a 5.0
#define T0 298.15         // define constante igual a 298.15 Kelvin
#define Rt 10000          // Resistor do divisor de tensao
#define R0 10000          // Valor da resistencia inicial do NTC
#define T1 273.15         // [K] in datasheet 0o C
#define T2 373.15         // [K] in datasheet 100° C
#define RT1 35563         // [ohms] resistencia in T1
#define RT2 549           // [ohms] resistencia in T2
float beta = 0.0;         // parametros iniciais [K]
float Rinf = 0.0;         // parametros iniciais [ohm]
float TempKelvin = 0.0;   // variable output
float TempCelsius = 0.0;  // variable output
float Vout = 0.0;         // Vout in A0
float Rout = 0.0;

//Sensores nesta estapa : DHT interno, dht externo,solo Resistivo Estufa, Solo Resistivo Mudas, Acionamento Muda, Acionamento Estufas, LDR,Termistor
//Definição de Pinos e Sensores
#define mudasPin 2    //D4 Acionamento Relé Mudas , Liga no Low
#define sprayPin 13   //D7 Acionamento Relé Estufa , Liga no HIGH
#define DHTMODULO 14  //D5 Sensor Temp Externo
#define DHTESTUFA 12  //D6 Sensor Temp Estufa
#define LDRPIN 5      //D1 Sensor Luminosidade
#define VRTPIN 16     //D0 Varistor
#define UmSRes1 0     //D3 Sensor Umidade do Solo Resistivo 1
//Adicionar os dois sensores de capacitancia!!
//#define UmSCap1 5  //D1  Agurdar os MUX talvez!
//#define UmSCap2 2  //D2

//Sensores DHT 11
#define DHTTYPE DHT11
DHT dhtModulo(DHTMODULO, DHTTYPE);
float temperatureModulo = 0.0;
float humidityModulo = 0.0;
DHT dhtEstufa(DHTESTUFA, DHTTYPE);
float temperatureEstufa = 0.0;
float humidityEstufa = 0.0;
float mediaVaristor = 0.0;
//Sensor Luminosidade
float lumPC = 0.0;
//Sensor Umidade Solo
float soilUmUm = 0.0;
//Sensor Umidade Solo Capacitivo 1
float soilCap1 = 0.0;
//Sensor Umidade Solo Capacitivo 2
float soilCap2 = 0.0;
//Controle Liga/Desliga Estufa
bool estufaLigada = 1;
int limiarEstufa = 80;

const int NUMERO_AMOSTRAS = 40;  //Amostras para mandar apenas a media para a planilha
long somatoria = 0;
int leitura_sensor = 0;


//GSheets
#define PROJECT_ID "estufas-414918"
// Service Account's client email
#define CLIENT_EMAIL "**"
// Service Account's private key
const char PRIVATE_KEY[] PROGMEM = "-----BEGIN PRIVATE KEY-----\n**\n\n-----END PRIVATE KEY-----\n";
unsigned long ms = 0;
unsigned long mr = 0;
void tokenStatusCallback(TokenInfo info);

const long utcOffsetInSeconds = -10800;  //Ajuste de data e hora
// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");
//Variaveis data e hora
time_t epochTime;
int monthDay;
int currentMonth;
int currentYear;
String currentDate;
String formattedTime;

//Variaveis de Tempos de Ciclo e Spray
int tempoCiclo = 60000;        // 1 min
int tempoIrrigacao = 60000;    //1 min
int limiteUmidade = 45;        //45%

//--------------------------Métodos
//Conectar Wifi
void connectWiFi() {
  Serial.println("Tentando conectar ao WiFi...");

  for (int i = 0; i < numNetworks; i++) {
    WiFi.mode(WIFI_OFF);
    delay(1000);
    //This line hides the viewing of ESP as wifi hotspot
    WiFi.mode(WIFI_STA);

    WiFi.begin(ssid[i], password);  // Tentativa de conexão com a rede atual

    unsigned long startTime = millis();  // Tempo inicial de tentativa de conexão

    while (WiFi.status() != WL_CONNECTED && millis() - startTime < 60000) {
      delay(500);
      Serial.print(".");
    }

    if (WiFi.status() == WL_CONNECTED) {
      Serial.println("\nConectado ao WiFi!");
      return;  // Se a conexão for bem-sucedida, interrompa o loop e retorne
    } else {
      Serial.println("\nFalha ao conectar ao WiFi!");
      WiFi.disconnect();  // Desconecta do WiFi atual antes de tentar o próximo
    }
  }

  Serial.println("Todas as tentativas de conexão falharam.");
}

//Gsheets --
void tokenStatusCallback(TokenInfo info) {
  if (info.status == token_status_error) {
    GSheet.printf("Token info: type = %s, status = %s\n", GSheet.getTokenType(info).c_str(), GSheet.getTokenStatus(info).c_str());
    GSheet.printf("Token error: %s\n", GSheet.getTokenError(info).c_str());
  } else {
    GSheet.printf("Token info: type = %s, status = %s\n", GSheet.getTokenType(info).c_str(), GSheet.getTokenStatus(info).c_str());
  }
}

//dht11
void Load_DHT11_Data() {

  //Leitura Modulo
  //-----------------------------------------------------------
  temperatureModulo = dhtModulo.readTemperature();  //Celsius
  humidityModulo = dhtModulo.readHumidity();
  //-----------------------------------------------------------
  // Check if any reads failed.
  if (isnan(temperatureModulo) || isnan(humidityModulo)) {
    Serial.println("Failed to read from DHT Modulo sensor!");
    temperatureModulo = 0.0;
    humidityModulo = 0.0;
  }
  //-----------------------------------------------------------
  Serial.printf("Temperature Outside: %f °C\n", temperatureModulo);
  Serial.printf("Humidity Outside: %f %%\n", humidityModulo);

  //Leitura Estufa
  //-----------------------------------------------------------
  temperatureEstufa = dhtEstufa.readTemperature();  //Celsius
  humidityEstufa = dhtEstufa.readHumidity();
  //-----------------------------------------------------------
  // Check if any reads failed.
  if (isnan(temperatureEstufa) || isnan(humidityEstufa)) {
    Serial.println("Failed to read from DHT Estufa sensor!");
    temperatureEstufa = 0.0;
    humidityEstufa = 0.0;
  }
  //-----------------------------------------------------------
  Serial.printf("Temperature Estufa: %f °C\n", temperatureEstufa);
  Serial.printf("Humidity Estufa: %f %%\n", humidityEstufa);
}


//Leitura Sensores Resistivos
int readPin(const byte &p) {

  digitalWrite(p, HIGH);
  analogRead(A0);
  for (int i = 1; i <= NUMERO_AMOSTRAS; i++) {
    int r;
    r = analogRead(A0);
    somatoria = somatoria + r;
  }
  digitalWrite(p, LOW);

  int media = somatoria / NUMERO_AMOSTRAS;
  return media;
}

//Enviador de Dados
void loop_enviadorDados() {

  bool ready = GSheet.ready();
  if (ready && millis() - ms > 15000) {
    ms = millis();

    FirebaseJson response;

    Serial.println("\nAppend spreadsheet values...");
    Serial.println("----------------------------");

    FirebaseJson valueRange;
    //Dados em linha
    valueRange.add("majorDimension", "ROWS");
    //rawdate
    valueRange.set("values/[0]/[0]", epochTime);
    //data
    valueRange.set("values/[0]/[1]", currentDate);
    //hora
    valueRange.set("values/[0]/[2]", formattedTime);
    //Temperatura Externa
    valueRange.set("values/[0]/[3]", temperatureModulo);
    //Umidade do AR Externo
    valueRange.set("values/[0]/[4]", humidityModulo);
    //Temperatura Termistor
    valueRange.set("values/[0]/[5]", TempCelsius);
    //Umidade Solo 1 Resistivo Externo Mudas
    valueRange.set("values/[0]/[6]", soilUmUm);
    //Luminosidade
    valueRange.set("values/[0]/[7]", lumPC);
    //Umidade Solo Capacitivo 1 - Provavelmente Estufas
    valueRange.set("values/[0]/[8]", soilCap1);
    //Umidade Solo Capacitivo 2
    valueRange.set("values/[0]/[9]", soilCap2);
    //Temperatura Estufa
    valueRange.set("values/[0]/[10]", temperatureEstufa);
    //Umidade do AR Estufa
    valueRange.set("values/[0]/[11]", humidityEstufa);


    bool success = GSheet.values.append(&response /* returned response */, "1ghTXvGyQEu-iUEI7eEYKt2wTln5SJcn2WORhD5_FF_o" /* spreadsheet Id to append */, "Dados!A2" /* range to append */, &valueRange /* data range to append */);
    if (success) {

      response.toString(Serial, true);
    } else {

      Serial.println(GSheet.errorReason());
      Serial.println();
    }
    Serial.println(ESP.getFreeHeap());
  } else {
    return;
  }
}

//Recebedor de Dados
void loop_receberDados() {
  bool ready = GSheet.ready();
  Serial.println("Receber Dados Iniciando");

  if (ready && millis() - mr > 15000) {
    mr = millis();
    Serial.println("--Gsheet Ready--");

    FirebaseJson response2;
    FirebaseJsonData result;   //Tempo Ciclo
    FirebaseJsonData result2;  //Limiar Estufa
    FirebaseJsonData result3;  //Estufa Ligada
    FirebaseJsonData result4;  //Tempo Irrigacao
    FirebaseJsonData result5;  //Valor Limite Irrigação


    Serial.println("Get spreadsheet values from range...");
    Serial.println("---------------------------------------------------------------");

    bool success = GSheet.values.get(&response2, "1ghTXvGyQEu-iUEI7eEYKt2wTln5SJcn2WORhD5_FF_o", "Config!A2:E2");

    response2.get(result /* FirebaseJsonData */, "values/[0]/[0]" /* key or path */);

    response2.get(result2 /* FirebaseJsonData */, "values/[0]/[1]" /* key or path */);

    response2.get(result3 /* FirebaseJsonData */, "values/[0]/[2]" /* key or path */);

    response2.get(result4 /* FirebaseJsonData */, "values/[0]/[3]" /* key or path */);

    response2.get(result5 /* FirebaseJsonData */, "values/[0]/[4]" /* key or path */);

   

    response2.toString(Serial, true);


    Serial.println("novo tempo Ciclo");
    tempoCiclo = result.to<int>();
    Serial.println(tempoCiclo);

    Serial.println("novo Limiar Estufa");
    limiarEstufa = result2.to<int>();
    Serial.println(limiarEstufa);

    Serial.println("Estufa Ligada:");
    estufaLigada = result3.to<int>();
    Serial.println(estufaLigada);

    Serial.println("novo tempo de Irrigação");
    tempoIrrigacao = result4.to<int>();
    Serial.println(tempoIrrigacao);

    Serial.println("novo Limite de Umidade");
    limiteUmidade = result5.to<int>();
    Serial.println(limiteUmidade);


  } else {
    return;
  }
}


//--------------Setup
void setup() {

  Serial.begin(115200);

  //Sensores
  dhtModulo.begin();
  dhtEstufa.begin();

  //Varistor
  beta = (log(RT1 / RT2)) / ((1 / T1) - (1 / T2));  // calculo de beta
  Rinf = R0 * exp(-beta / T0);                      // calculo de Rinf
  delay(100);
  // Define pinos como Saida
  pinMode(VRTPIN, OUTPUT);
  digitalWrite(VRTPIN, LOW);

  //Luminosidade
  pinMode(LDRPIN, OUTPUT);  //Cabo marrom no ESP8266
  digitalWrite(LDRPIN, LOW);

  //Umidade Solo 1
  pinMode(UmSRes1, OUTPUT);
  digitalWrite(UmSRes1, LOW);

  //Pino Acionamento do relé Estufa
  pinMode(sprayPin, OUTPUT);
  digitalWrite(sprayPin, LOW);

  //Pino Acionamento da Irrigação Mudas
 pinMode(mudasPin, OUTPUT);
  digitalWrite(mudasPin, HIGH);

  //GSheet.printf("ESP Google Sheet Client v%s\n\n", ESP_GOOGLE_SHEET_CLIENT_VERSION);

  //WiFi Novo
  connectWiFi();


  //Inicializando Gsheets
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWi-Fi connected!");

    // Set the callback for Google API access token generation status (for debug only)
    GSheet.setTokenCallback(tokenStatusCallback);

    GSheet.setPrerefreshSeconds(10 * 60);
    GSheet.begin(CLIENT_EMAIL, PROJECT_ID, PRIVATE_KEY);

  } else {
    Serial.println("\nFailed to connect to Wi-Fi!");
  }

  // Initialize a NTPClient to get time
  timeClient.begin();
  timeClient.setTimeOffset(-10800);
}

void loop() {

  //Temperatura Varistor
  mediaVaristor = readPin(VRTPIN);
  Vout = Vin * ((float)(mediaVaristor) / 940.0);  // calculo de V0 e leitura de A0
  Rout = (Rt * Vout / (Vin - Vout));                // calculo de Rout
  TempKelvin = (beta / log(Rout / Rinf));           // calculo da temp. em Kelvins
  TempCelsius = TempKelvin - 273.15;                // calculo da temp. em Celsius
  Serial.print("Temperatura em Celsius: ");         // imprime no monitor serial
  Serial.print(TempCelsius);                        // imprime temperatura Celsius

  //Leitura Luminosidade
  lumPC = map(readPin(LDRPIN), 0, 860, 100, 0);
  Serial.println();
  Serial.print("Luminosidade em : ");
  Serial.print(lumPC);
  Serial.println("%");

  //Leitura umidade Solos
  soilUmUm = map(readPin(UmSRes1), 0, 860, 100, 0);
  Serial.println();
  Serial.print("Umidade do Solo 1 em : ");
  Serial.print(soilUmUm);
  Serial.println("%");


  Load_DHT11_Data();


  // Verifica se a conexão com a Internet está ativa a cada intervalo de tempo
  if (WiFi.status() == WL_CONNECTED) {

    //Inserir data e hora
    timeClient.update();
    epochTime = timeClient.getEpochTime();
    Serial.print("Epoch Time: ");
    Serial.println(epochTime);

    //Get a time structure
    struct tm *ptm = gmtime((time_t *)&epochTime);

    monthDay = ptm->tm_mday;
    Serial.print("Month day: ");
    Serial.println(monthDay);

    currentMonth = ptm->tm_mon + 1;
    Serial.print("Month: ");
    Serial.println(currentMonth);

    currentYear = ptm->tm_year + 1900;
    Serial.print("Year: ");
    Serial.println(currentYear);

    //Print complete date:
    currentDate = String(currentMonth) + "-" + String(monthDay) + "-" + String(currentYear);
    Serial.print("Current date: ");
    Serial.println(currentDate);

    formattedTime = timeClient.getFormattedTime();
    Serial.print("Formatted Time: ");
    Serial.println(formattedTime);

    for (int i = 0; i < 3; i++) {
      if (GSheet.ready()) {
        // Se a conexão estiver pronta, execute as funções relacionadas ao Google Sheets
        loop_enviadorDados();
        loop_receberDados();
        break;  // Sai do loop de tentativas se a conexão estiver pronta
      } else {
        // Set the callback for Google API access token generation status (for debug only)
        //GSheet.setTokenCallback(tokenStatusCallback);

        Serial.println("Trying to reconnect to Google Sheets...");
        GSheet.setPrerefreshSeconds(10 * 60);
        GSheet.begin(CLIENT_EMAIL, PROJECT_ID, PRIVATE_KEY);
        delay(5000);  // Aguarda um curto período antes de tentar novamente

        loop_enviadorDados();

        loop_receberDados();
      }
    }
  } else {
    Serial.println("Disconnected from Wi-Fi. Reconnecting...");

    WiFi.disconnect();
    delay(500);

    connectWiFi();
  }
  //Codigo acionamento rele Novo
  if (estufaLigada == 1) {

    if (humidityEstufa < limiarEstufa) {
      digitalWrite(sprayPin, HIGH);
    } else {
      digitalWrite(sprayPin, LOW);
    }

  } else {

    digitalWrite(sprayPin, LOW);
  }


  //Liga o relé da irrigação das mudas
  if (soilUmUm < limiteUmidade) {
    Serial.println("Relé Irrigação Acionado");
    //digitalWrite(mudasPin, LOW);
    delay(tempoIrrigacao);
   // digitalWrite(mudasPin, HIGH);
    Serial.println("Relé Irrigação Desligado");
  }


  Serial.println("Delay do ciclo: ");
  Serial.print(tempoCiclo);
  delay(tempoCiclo);
}
